#include <stdio.h>
#include <stdlib.h>
#include "mpc.h"

/* If we are compiling on Windows or Risc OS */
#if defined (_WIN32) || defined (__riscos)
#include <string.h>

static char buffer[2048];

/* Fake readline function */
char* readline(char* prompt) {
  fputs(prompt, stdout);
  fgets(buffer, 2048, stdin);
  char* cpy = malloc(strlen(buffer)+1);
  strcpy(cpy, buffer);
  cpy[strlen(cpy)-1] = '\0';
  return cpy;
}

/* fake add_history function */
void add_history(char* unused) {}

/* Otherwise include the editline headers */
#else
#include <editline/readline.h>
#include <editline/history.h>
#endif

int main(int argc, char** argv) {

  /* Create some Parsers */
  mpc_parser_t* Number   = mpc_new("number");
  mpc_parser_t* Operator = mpc_new("operator");
  mpc_parser_t* Expr     = mpc_new("expr");
  mpc_parser_t* Risp     = mpc_new("risp");

  /* Define them with the following Language */
  mpca_lang(MPCA_LANG_DEFAULT,
    "                                     		\
      number	: /-?[0-9]+/ ;		  		\
      operator	: '+' | '-' | '*' | '/' ; 		\
      expr	: <number> |'(' <operator> <expr>+ ')' ;\
      risp	: /^/ <operator> <expr>+ /$/ ;		\
    ",
    Number, Operator, Expr, Risp);

  /* Print Version and Exit Information */
  puts("Risp Version 0.0.0.0.1");
  puts("Press ESC to Exit\n");

  /* In a never ending loop */
  while (1) {

    char* input = readline("risp> ");
    add_history(input);

    /* Attempt to Parse the user Input */
    mpc_result_t r;
    if (mpc_parse("<stdin>", input, Risp, &r)) {
      /* On success print the AST */
      mpc_ast_print(r.output);
      mpc_ast_delete(r.output);
    } else {
      mpc_err_print(r.error);
      mpc_err_delete(r.error);
    }

    free(input);
  }

  /* Undefine and Delete our parses */
  mpc_cleanup(4, Number, Operator, Expr, Risp);

  return 0;
}
